### DEFINE CONSTANTS ###

#These are universal.
#@BaseKB

#MARTHA, the program
+MARTHA
=(isa MARTHA IntelligentAgent)

#USER, the MARTHA User.
+USER
=(isa USER Person)

### DEFINE MARTHA FUNCTIONS ###

#TMF is short for TMF

#Define say-TheMARTHAFunction: Output a statement to the user.
#Syntax: (say-TMF <thing to say>)
*say-TMF
=(arity say-TMF 1)
=(argIsa say-TMF 1  Thing)
#Saying something causes the user to know what was said.
>(causes-PropProp (say-TMF ?THING) (knows USER ?THING))
#Saying something implies that the user knows that was said.
#This is distinct from causes-PropProp, since this will actually
#make Cyc change the state of (knows USER ?THING)
>(implies (say-TMF ?THING) (knows USER ?THING))
>(implies (say-TMF ?THING) (knows MARTHA (knows USER ?THING)))
#NOTE: It is no longer a precondition for say-TMF that the user does unknownSentence  know.
#It is now codeded as a negative utility value.

#Define query-TheMARTHAFunction: Ask the user a question.
#Syntax: (query-TMF <thing to ask>)
*query-TMF
=(arity query-TMF 1)
=(argIsa query-TMF 1 Thing)
#Asking whether the user knows something is a precondition for MARTHA knowing
#what the user knows.
>(causes-PropProp (unknownSentence  (knows MARTHA (knows USER ?THING))) (query-TMF (knows USER ?THING)))
>(causes-PropProp (query-TMF (knows USER ?THING)) (knows MARTHA (knows USER ?THING)))

#Predicate indicating the persistence of goal.
#Syntax: (goalIsPersistent <goal> <isPersistent? T/F>)
*goalIsPersistent
=(arity goalIsPersistent 2)
=(argIsa goalIsPersistent 1 Thing)
=(argIsa goalIsPersistent 2 TruthValue)

#Given an event, return the utility yield decimal at a certain time for an event.
#Syntax: (utilityYield <event time> <current time> <yield (decimal)>)
*utilityYield
=(arity utilityYield 3)
=(isa utilityYield FunctionalPredicate)
=(functionalInArgs utilityYield 2)
=(argIsa utilityYield 1 Date)
=(argIsa utilityYield 2 Date)
=(argIsa utilityYield 3 ScalarQuantity)
#utilityYield BEFORE an action. Yield increases as action approaches.
#Return % Yield based on sigmoid function U(x) = 1/(1+e^((x-7200)/(2400))) where x is the time difference between ?NOW and ?DATE.
#This is an actual-scale curve. Using testing curve for now.
#>(implies (and (startsAfterEndingOf ?DATE ?NOW) (duration (TimeIntervalInclusiveFn ?NOW ?DATE) (SecondsDuration ?TIMEUNTIL)) (evaluate ?QUANTITY (QuotientFn 1 (PlusFn 1 (ExponentFn 2.71828 (QuotientFn (DifferenceFn ?TIMEUNTIL 7200) 2400)))))) (utilityYield ?DATE ?NOW ?QUANTITY))
>(implies (and (startsAfterEndingOf ?DATE ?NOW) (duration (TimeIntervalInclusiveFn ?NOW ?DATE) (SecondsDuration ?TIMEUNTIL)) (evaluate ?QUANTITY (QuotientFn 1 (PlusFn 1 (ExponentFn 2.71828 (QuotientFn (DifferenceFn ?TIMEUNTIL 30) 5)))))) (utilityYield ?DATE ?NOW ?QUANTITY))
#utilityYield AFTER an action. Yield increases as time passes after the action.
#Return % Yield based on sigmoid function U(x) = 1/(1+e^((80000-x)/(5000))) where x is the time difference between ?DATE and ?NOW.
#This is an actual-scale curve. Using testing curve for now.
#>(implies (and (startsAfterEndingOf ?NOW ?DATE) (duration (TimeIntervalInclusiveFn ?DATE ?NOW) (SecondsDuration ?TIMEUNTIL)) (evaluate ?QUANTITY (QuotientFn 1 (PlusFn 1 (ExponentFn 2.71828 (QuotientFn (DifferenceFn 80000 ?TIMEUNTIL) 5000)))))) (utilityYield ?DATE ?NOW ?QUANTITY))
>(implies (and (startsAfterEndingOf ?NOW ?DATE) (duration (TimeIntervalInclusiveFn ?DATE ?NOW) (SecondsDuration ?TIMEUNTIL)) (evaluate ?QUANTITY (QuotientFn 1 (PlusFn 1 (ExponentFn 2.71828 (QuotientFn (DifferenceFn 30 ?TIMEUNTIL) 5)))))) (utilityYield ?DATE ?NOW ?QUANTITY))

#The BASE utility value of a particular state to the Intelligent Agent.
#Syntax: (baseUtilityValue <subjective agent> <action> <base utility>)
*baseUtilityValue
=(arity baseUtilityValue 3)
=(argIsa baseUtilityValue 1 IntelligentAgent)
=(argIsa baseUtilityValue 2 Thing)
=(argIsa baseUtilityValue 3 Thing)

#The TEMPORAL utility value of a particular state to the Intelligent Agent.
#Here, we want to maximize value to the USER, so everything 
#is done relative to that.
#Syntax: (utilityValue <subjective agent> <time> <action> <utility at time>)
*utilityValue
=(arity utilityValue 4)
=(argIsa utilityValue 1 IntelligentAgent)
=(argIsa utilityValue 2 Date)
=(argIsa utilityValue 3 Thing)
=(argIsa utilityValue 4 Thing)
>(implies (and (baseUtilityValue ?AGENT ?ACTION ?BASEVALUE) (exactAssertTime ?ACTION ?DATE) (utilityYield ?DATE ?TIME ?YIELD) (evaluate ?VALUE (TimesFn ?BASEVALUE ?YIELD))) (utilityValue ?AGENT ?TIME ?ACTION ?VALUE))

#Store the SECOND-RESOLUTION assertion time of actions.
*exactAssertTime
=(arity exactAssertTime 2)
=(argIsa exactAssertTime 1 Thing)
=(argIsa exactAssertTime 2 Date)

### UTILITY VALUES ###
#Set the utility values of KNOWS
#STATIC VALUES
#>(implies (and ?THING (unknownSentence (knows USER ?THING))) (utilityValue USER ??NOW (knows USER ?THING) 15))
#>(implies (and ?THING (knows USER ?THING)) (utilityValue USER ??NOW (knows USER ?THING) 5))
#>(implies (and ?THING (unknownSentence  (knows MARTHA (knows USER ?THING)))) (utilityValue USER ??NOW (knows MARTHA (knows USER ?THING)) 15))
#>(implies (and ?THING (knows MARTHA (knows USER ?THING))) (utilityValue USER ??NOW (knows MARTHA (knows USER ?THING)) 5))
#>(implies (and ?THING (unknownSentence (knows USER ?THING))) (utilityValue USER ??NOW (say-TMF ?THING) 5))
#>(implies (and ?THING (knows USER ?THING)) (utilityValue USER ??NOW (say-TMF ?THING) 0))

>(implies (and ?THING (unknownSentence (knows USER ?THING))) (baseUtilityValue USER (say-TMF ?THING) 10))
>(implies (and ?THING (knows USER ?THING)) (utilityValue USER ??NOW (say-TMF ?THING) 5))

#DYNAMIC TIME-BASED YIELD
#>(implies (and ?THING (knows USER ?THING) (exactAssertTime (knows USER ?THING) ?DATE)) (and (utilityValue USER ?NOW (knows USER ?THING) ?YIELD) (utilityYield ?DATE ?NOW ?YIELD) (evaluate ?VALUE (TimesFn 5 ?YIELD))))
#>(implies (and ?THING (knows USER ?THING) (exactAssertTime (say-TMF ?THING) ?DATE)) (and (utilityValue USER ?NOW (say-TMF ?THING) ?VALUE) (utilityYield ?DATE ?NOW ?YIELD) (evaluate ?VALUE (DifferenceFn (TimesFn 10 ?YIELD) 10))))
#>(implies (and ?THING (knows USER ?THING) (utilityYield (IndexicalReferentFn Now-Indexical) ?NOW ?YIELD) (evaluate ?VALUE (DifferenceFn (TimesFn 10 ?YIELD) 10))) (utilityValue USER ?NOW (say-TMF ?THING) ?VALUE))

>(implies (and (beliefs USER ?X) (not ?X)) (utilityValue USER ??NOW (and (say-TMF "HEY! WATCH OUT!") (say-TMF (not ?X))) 100))

#Set utility values of DESIRES
>(implies (and (desires USER ?SOMETHING) (or (unknownSentence  ?SOMETHING) (not ?SOMETHING))) (utilityValue USER ??NOW ?SOMETHING 20))
#STATIC
#>(implies (and (desires USER ?SOMETHING) ?SOMETHING) (utilityValue USER ?SOMETHING 5))
#DYNAMIC
>(implies (and (desires USER ?SOMETHING) ?SOMETHING (exactAssertTime ?SOMETHING ?DATE) (utilityYield ?DATE ?NOW ?YIELD) (evaluate ?VALUE (TimesFn 5 ?YIELD))) (utilityValue USER ?NOW ?SOMETHING ?YIELD))

### OTHER RULES ###

#If the user knows something in the KB, then MARTHA knows that the user knows something.
>(implies (knows USER ?SOMETHING) (knows MARTHA (knows USER ?SOMETHING)))

#The user knows that is said, and MARTHA knows it too.
>(implies (say-TMF ?THING) (and (knows USER ?THING) (knows MARTHA (knows USER ?THING))))

